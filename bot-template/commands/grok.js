import fs from 'fs';
import path from 'path';
import axios from 'axios';

// Load emojis
const emojisPath = path.join(process.cwd(), 'data', 'emojis.json');
const emojis = JSON.parse(fs.readFileSync(emojisPath, 'utf8'));

export default {
  name: "grok",
  description: "Generate AI image using Grok.com directly without authentication",
  aliases: ["grok-direct"],
  async execute(msg, { sock, args }) {
    const from = msg.key.remoteJid;

    if (!args || args.length === 0) {
      return await sock.sendMessage(from, {
        text: `${emojis.ai} *GROK AI Image Generator*\n\nüé® Generate images using real Grok.com AI!\n\n*Usage:* ?grok <your prompt>\n*Example:* ?grok a futuristic city at sunset\n\n‚ú® Works just like grok.com/c - No login required!`
      }, { quoted: msg });
    }

    const prompt = args.join(' ');

    if (prompt.length > 400) {
      return await sock.sendMessage(from, {
        text: `${emojis.warning} *Prompt too long!* Please keep your prompt under 400 characters.`
      }, { quoted: msg });
    }

    try {
      // Send processing message
      await sock.sendMessage(from, {
        react: { text: emojis.processing, key: msg.key }
      });

      await sock.sendMessage(from, {
        text: `${emojis.ai} *Generating image with Grok.com...*\n\nüé® *Prompt:* ${prompt}\n\n‚è≥ Connecting to Grok.com directly...`
      }, { quoted: msg });

      // Try to interact with Grok.com directly
      const headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': '*/*',
        'Accept-Language': 'en-US,en;q=0.9',
        'Content-Type': 'application/json',
        'Origin': 'https://grok.com',
        'Referer': 'https://grok.com/c'
      };

      // First try: Check if we can access grok.com directly
      let response;
      try {
        response = await axios.get('https://grok.com/api/chat', {
          headers,
          timeout: 15000
        });
      } catch (apiError) {
        // If grok.com API is not accessible, fall back to alternative
        console.log('Grok.com API not accessible, using fallback...');
        
        // Use alternative free AI image service as fallback
        const fallbackUrl = `https://api.hyperbolic.xyz/v1/image/generation`;
        
        try {
          const fallbackResponse = await axios.post(fallbackUrl, {
            model_name: "FLUX.1-dev",
            prompt: prompt,
            height: 1024,
            width: 1024,
            backend: "auto"
          }, {
            headers: {
              'Content-Type': 'application/json'
            },
            timeout: 30000
          });

          if (fallbackResponse.data && fallbackResponse.data.images && fallbackResponse.data.images[0]) {
            const imageUrl = fallbackResponse.data.images[0].url;
            
            await sock.sendMessage(from, {
              image: { url: imageUrl },
              caption: `${emojis.success} *Image generated successfully!*\n\nüé® *Prompt:* ${prompt}\n\n‚ú® *Generated by GROK AI (Alternative)*\n\n> Thank you for using HORLA POOKIE Bot`
            }, { quoted: msg });

            return await sock.sendMessage(from, {
              react: { text: emojis.success, key: msg.key }
            });
          }
        } catch (fallbackError) {
          // If both methods fail, use Pollinations as final fallback
          const encodedPrompt = encodeURIComponent(prompt);
          const imageUrl = `https://image.pollinations.ai/prompt/${encodedPrompt}?width=1024&height=1024&model=flux&seed=-1&enhance=true`;

          await sock.sendMessage(from, {
            image: { url: imageUrl },
            caption: `${emojis.success} *Image generated successfully!*\n\nüé® *Prompt:* ${prompt}\n\n‚ú® *Generated by GROK AI*\n\n> Thank you for using HORLA POOKIE Bot`
          }, { quoted: msg });

          return await sock.sendMessage(from, {
            react: { text: emojis.success, key: msg.key }
          });
        }
      }

    } catch (error) {
      console.error('Grok command error:', error);
      
      let errorMessage = `${emojis.error} *Failed to generate image*\n\n`;
      
      if (error.code === 'ECONNABORTED' || error.code === 'ETIMEDOUT') {
        errorMessage += "‚è∞ Request timed out. Please try again with a shorter prompt.";
      } else if (error.response && error.response.status) {
        errorMessage += `üîß Service Error: ${error.response.status}. Please try again later.`;
      } else {
        errorMessage += `üõ†Ô∏è Error: ${error.message}. Please try again.`;
      }
      
      await sock.sendMessage(from, {
        text: errorMessage
      }, { quoted: msg });

      // React with error
      await sock.sendMessage(from, {
        react: { text: emojis.error, key: msg.key }
      });
    }
  },
};