import fs from 'fs';
import path from 'path';

// Load emojis
const emojisPath = path.join(process.cwd(), 'data', 'emojis.json');
const emojis = JSON.parse(fs.readFileSync(emojisPath, 'utf8'));

export default {
  name: "pollination",
  description: "Generate AI image using Pollination AI with your prompt",
  aliases: ["polly"],
  async execute(msg, { sock, args }) {
    const from = msg.key.remoteJid;

    if (!args || args.length === 0) {
      return await sock.sendMessage(from, {
        text: `${emojis.ai} *POLLINATION AI Image Generator*\n\nüé® Generate images using AI with your prompt!\n\n*Usage:* ?pollination <your prompt>\n*Example:* ?polly a futuristic city at sunset\n\n‚ú® No API keys needed - completely free!`
      }, { quoted: msg });
    }

    const prompt = args.join(' ');

    if (prompt.length > 500) {
      return await sock.sendMessage(from, {
        text: `${emojis.warning} *Prompt too long!* Please keep your prompt under 500 characters.`
      }, { quoted: msg });
    }

    try {
      // Send processing message
      await sock.sendMessage(from, {
        react: { text: emojis.processing, key: msg.key }
      });

      await sock.sendMessage(from, {
        text: `${emojis.ai} *Generating image with Pollination AI...*\n\nüé® *Prompt:* ${prompt}\n\n‚è≥ Processing your request...`
      }, { quoted: msg });

      // Use Pollinations.ai - free AI image generation, no API key needed
      // This works exactly like grok.com/c but without authentication
      const encodedPrompt = encodeURIComponent(prompt);
      const imageUrl = `https://image.pollinations.ai/prompt/${encodedPrompt}?width=1024&height=1024&model=flux&seed=-1&enhance=true`;

      // Send the generated image
      await sock.sendMessage(from, {
        image: { url: imageUrl },
        caption: `${emojis.success} *Image generated successfully!*\n\nüé® *Prompt:* ${prompt}\n\n‚ú® *Generated by POLLINATION AI Bot*\n\n> Thank you for using HORLA POOKIE Bot`
      }, { quoted: msg });

      // React with success
      await sock.sendMessage(from, {
        react: { text: emojis.success, key: msg.key }
      });

    } catch (error) {
      console.error('Pollination command error:', error);
      
      let errorMessage = `${emojis.error} *Failed to generate image*\n\n`;
      
      if (error.code === 'ECONNABORTED' || error.code === 'ETIMEDOUT') {
        errorMessage += "‚è∞ Request timed out. Please try again with a shorter prompt.";
      } else if (error.response && error.response.status) {
        errorMessage += `üîß Service Error: ${error.response.status}. Please try again later.`;
      } else {
        errorMessage += `üõ†Ô∏è Error: ${error.message}. Please try again.`;
      }
      
      await sock.sendMessage(from, {
        text: errorMessage
      }, { quoted: msg });

      // React with error
      await sock.sendMessage(from, {
        react: { text: emojis.error, key: msg.key }
      });
    }
  },
};